 latest Documents: Introduction Mechanism Price Oracle List a token to trade DutchX as an open protocol The dxDAO Marketmakers Interfaces Pooling for MGN API CLI Analytics &amp; Alerts Developer guides: Get started: Build on top of DutchX Local development + truffle On-chain integration Deposit tokens Add a token pair Bots: Automated minimal liquidity Bots: Types Bots: Security Bots: Add a price feed for the bots Bots: Arbitrage to Uniswap Community: Hackathons Community Resources Integration Ideas Contribute Reference: Smart Contracts Addresses DutchX 2.0 - dxDAO DutchX 1.0 Changes from DutchX 1.0 to 2.0 Security Github: Smart Contracts Github: API, Bots, CLI, services DutchX Docs » Learn more about DutchX Edit on GitHub The DutchX is a fully decentralized trading protocol thatallows anyone to add any trading token pair. It uses the Dutch auction principle to prevent the problems that exchanges are experiencing (suchas front running, issues with low liquidity, and third party risk), thereby creating a more fair ecosystem for everyone to use. The DutchX is governed by a series of smart contracts deployed on the Ethereum Blockchain that allow peer-to-peer trades between users applying a Dutch auction mechanism without the need for intermediaries. It is fully on-chain and permissionless. There is no restriction besides the fact that tokens traded on the DutchX must be ERC20 compliant. It was developed by Gnosis Limited as infrastructure of the Ethereum Blockchain. It is upgradeable and those powers are retained by the [dxDAO]( https://dutchx.readthedocs.io/en/latest/dxDAO.html ). Gnosis Limited is not part of the dxDAO and retains absolutely no miscellaneous powers over or to affect the DutchX. Learn more about DutchX ¶ Here are some interesting links to learn all about the mechanisms of the DutchX: Small introduction to the features of DutchX : https://ethresear.ch/t/dutchx-fully-decentralized-auction-based-exchange/2443 Blog with information about DutchX : https://blog.gnosis.pm/tagged/dutchx Documentation for the Smart Contracts ¶ To get a deeper knowledge about the DutchX mechanisms, and the math behind them,check out the DutchX Documentation for the smart contracts. Documents: Introduction Mechanism Liquidity contribution Magnolia Whitelist GNO OWL What is OWL? What is OWL used for on the DutchX? How is it used on the DutchX? Why would one want to use OWL? How does one get OWL? Auctioneer Powers What are auctioneer powers? Why are auctioneer powers needed? Who holds auctioneer powers to DutchX 1.0? Who holds auctioneer powers to DutchX 2.0? Some more details on the auctioneer powers: De- &amp; whitelisting of tokens that generate Magnolia Changing the threshold to start auctions Changing the threshold to add tokens to the DutchX protocol Setting a new external ETH/USD price feed Updating the DutchX contract logic Setting a new auctioneer Price Oracle List a token to trade The theory to list Some benefits of being traded on the DutchX Liquidity Availabilty of different pairs Technical steps DutchX as an open protocol Smart contracts Services, API, Bots and CLI Contribute The dxDAO Social Catch up on the topic Miscellaneous Participation using ABI Marketmakers Looking for Marketmakers? Interfaces TL;DR DutchX as an open protocol Available interfaces Seller interface Bidder interface Command line interface (CLI) Application programming interface (API) Pooling for MGN Disclaimer Status Purpose of the contract Logic of the contract Users’ actions Application to any ERC20 token Code and audit API Read only API Integration with the API CLI How to run the CLI Start trading 1. Deposit tokens 2. Trade on the DutchX 3. Claim the tokens from the auction you took part in 4. Withrdaw tokens from the DutchX smart contract Useful commands Price related commands Auction and trading history commands Analytics &amp; Alerts Developer guides: Get started: Build on top of DutchX Next steps Local development + truffle Next steps On-chain integration Use DutchX as an Oracle Deposit tokens WETH (Wrapped Ether) Allowance (any ERC20 token) Deposit Sequence diagram How to do it? Add a token pair SUMMARY of the process of adding a token 1. Get the information for adding a token pair 2. Fund the account 3. Add the token pair 3a. Use the add-token-pair script ( recommended ) 3b. Using truffle console 3c. From a migration in your code 3d. Using the CLI Bots: Automated minimal liquidity How to run the bots 0. Requirements 1. Create the config file for the bots 2. Run the Bots Fund the bots DutchX CLI (Command Line Interface) State of a DutchX Auction Debug Next steps Bots: Types Sell Liquidity Bot Sell Liquidity Bot configuration Buy Liquidity Bot Buy Liquidity Bot configuration Buy Liquidity Bot price repository Balance Check Bot Balance Check Bot configuration High Sell Volume Bot High Sell Volume Bot configuration Deposit Bot Deposit Bot configuration Claim Bot Claim Bot configuration Watch Events Bot Bots: Security Bots: Add a price feed for the bots Price Feed Add your own Price Feed 1. Fork dx-services project 2. Add the new price feed repository 3. While adding the price feed 4. Unit testing the price repository 5. Add a Pull Request to our repository 6. Thank you for your collaboration Bots: Arbitrage to Uniswap Overview Introduction Contracts Bots Community: Hackathons Upcoming / ongoing Previous Judging Criteria Community Resources Blog Posts Videos Projects building on the DutchX Communication Channels Integration Ideas More defined sample ideas Further ideas Contribute Reference: Smart Contracts Addresses DutchX 2.0 - dxDAO Mainnet Rinkeby Kovan DutchX 1.0 Mainnet Rinkeby Kovan Changes from DutchX 1.0 to 2.0 Security Internal audit External audit Bug bounties Other intgerations Github: Smart Contracts Github: API, Bots, CLI, services Related Github projects ¶ Smart contracts : https://github.com/gnosis/dx-contracts Seller interface for DutchX : https://github.com/gnosis/dx-react Services, API, Bots and CLI : https://github.com/gnosis/dx-services Examples and guides :* Examples on how to build on top of the DutchX : https://github.com/gnosis/dx-examples-dev * Example on using the bots : https://github.com/gnosis/dx-examples-liquidity-bots * Example on using the read API : https://github.com/gnosis/dx-examples-api * Example on using the CLI : https://github.com/gnosis/dx-tools Contact the DutchX community ¶ Find the community in: https://gitter.im/gnosis/DutchX Next © Copyright 2018, DutchX Revision 8e4b08f7 . Built with Sphinx using a theme provided by Read the Docs . Read the Docs v: latest Versions latest Downloads PDF HTML Epub On Read the Docs Project Home Builds Downloads On GitHub View Edit Search Hosted by Read the Docs · Privacy Policy 