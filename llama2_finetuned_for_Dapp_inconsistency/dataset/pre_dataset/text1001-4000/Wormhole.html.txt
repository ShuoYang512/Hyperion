Products ProtocolsMessagingEnable secure, cross-chain transfers of data or tokensFront-endConnectIntegrate an in-app bridging widget in 3 lines of codeBlockchainsGatewayGrow liquidity and users for Cosmos-based chains and appsSolutionsDevelopersBlockchainsEcosystemBlogSubscribeBe the First to KnowSubscribe to the Wormhole newsletter for exclusive updates.​SubscribeProductsMessagingConnectGatewaySolutionsSolutionsSecurityNextDevelopersDevelopersDocumentationGitHubBug BountyNetworkBlockchainsWormhole ExplorerStatsEcosystemPartnersProgramsAvailable grantsAboutBlogCommunityBrand &amp; Press2023 Ⓒ Wormhole. All Rights Reserved.The Best Way to Build Cross-ChainHarnessing the power of generic messaging and a single SDK, the Wormhole interoperability protocol makes cross-chain movement more feature-rich than ever. Explore more about how to grow your userbase by going cross-chain.Get startedExplore solutionsThe future of Web3 is cross-chainThe next wave of Web3 will be powered by cross-chain communication.Since October 2020, Wormhole has been a leader in cross-chain and continues to evolve to meet the changing needs of Web3.play videoor play a gameAssetsCross-chain your assets to work on any supported chain with easeAppsCross-chain your apps to multiple chains with minimal effortDataCross-chain access to data that previously lived on one chainOne integration for 25+ blockchainsWormhole provides a low lift, low code solution for multiple cross-chain use cases.Get in touchGoing cross-chain is simple and configurableThe Wormhole SDK covers a wide range of use cases that makes going cross-chain simple for tokens, NFTs, apps, and other messaging applications. Easier composabilityWith Wormhole, applications on different chains work better together. So your lending protocols on Solana can leverage an insurance protocol on Ethereum, with ease.Support for multiple runtimesIncluding EVM, EVM+, Solana, CosmWASM, and Algorand.Modular architectureBuild protocols on top of Wormhole that can use data, assets, and messages from other chains.Wormhole observation (VAA)1struct WormholeMsg {2 uint8 version;3 uint32 timestamp;4 uint32 nonce;5 uint16 emitterChainId;6 bytes32 emitterAddress;7 uint64 sequence;8 uint8 consistencyLevel;9 bytes payload;1011 uint32 guardianSetIndex;12 Signature[] signatures;1314 bytes32 hash;15}1struct WormholeMsg {2 uint8 version;3 uint32 timestamp;4 uint32 nonce;5 uint16 emitterChainId;6 bytes32 emitterAddress;7 uint64 sequence;8 uint8 consistencyLevel;9 bytes payload;1011 uint32 guardianSetIndex;12 Signature[] signatures;1314 bytes32 hash;15}1struct WormholeMsg {2 uint8 version;3 uint32 timestamp;4 uint32 nonce;5 uint16 emitterChainId;6 bytes32 emitterAddress;7 uint64 sequence;8 uint8 consistencyLevel;9 bytes payload;1011 uint32 guardianSetIndex;12 Signature[] signatures;1314 bytes32 hash;15}Be The First to KnowSubscribe to the Wormhole newsletter for exclusive updates.​SubscribeProductsMessagingConnectGatewaySolutionsSolutionsSecurityNextDevelopersDevelopersDocumentationGitHubBug BountyNetworkBlockchainsWormhole ExplorerStatsEcosystemPartnersProgramsAvailable xGrantsAboutBlogCommunityBrand &amp; PressTerms of UsePrivacy Policy2023 Ⓒ Wormhole. All Rights Reserved.